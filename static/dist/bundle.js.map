{"version":3,"sources":["unbundle.js"],"names":["Store","require","console","error","settings","defaults","pageSize","$","regeneratorRuntime","log","columnTypes","playlists","songs","musicServer","capitlizeFirst","string","charAt","toUpperCase","slice","serialize","obj","str","p","push","encodeURIComponent","join","ResultView","React","Component","constructor","props","state","pageIndex","type","col1","i18n","__","col2","col3","pageData","searchBoxValue","query","componentDidMount","search","updateSearchInterval","setInterval","componentWillUnmount","clearInterval","get","resp","fetch","limit","offset","name","json","status","data","setState","render","comps","map","item","createdAt","JSON","parse","contents","length","PlaylistView","fetchSearch","event","searchValue","target","value","bind","views","uiManager","on","id","document","getElementById"],"mappings":"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","file":"bundle.js","sourceRoot":"..","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nconst Store = require('electron-store');\r\n// Settings Loading\r\nif(!Store){\r\n\tconsole.error(\"NO STORE found\");\r\n}\r\nconst settings = new Store({\r\n\tdefaults: {\r\n\t\tpageSize: 25,\r\n\t},\r\n});\r\n\r\n//import {$} from \"jquery\";\r\nconst $ = require(\"jquery\");\r\nconst regeneratorRuntime = require(\"regenerator-runtime\");\r\nconsole.log(\"bundle :D\");\r\nconst columnTypes = {\r\n\tplaylists: [\"Name\", \"Date\", \"Songs Count\"],\r\n\tsongs: [\"Name\", \"Artist\", \"Duration\"],\r\n};\r\nlet musicServer = \"http://localhost:3000\"; // NO SLASH!\r\n// RIP RepeatedComponent 2020 why did we need that anyway\r\nfunction capitlizeFirst(string) {\r\n\treturn string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n// https://stackoverflow.com/questions/7045065/how-do-i-turn-a-javascript-dictionary-into-an-encoded-url-string\r\nfunction serialize(obj) {\r\n\tvar str = [];\r\n\tfor (var p in obj)\r\n\t\tstr.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\r\n\treturn str.join(\"&\");\r\n}\r\nclass ResultView extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tpageIndex: 0,\r\n\t\t\ttype: props.type,\r\n\t\t\tcol1: i18n.__(columnTypes[props.type][0]),\r\n\t\t\tcol2: i18n.__(columnTypes[props.type][1]),\r\n\t\t\tcol3: i18n.__(columnTypes[props.type][2]),\r\n\t\t\tpageData: [],\r\n\t\t\tsearchBoxValue: props.query\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\t// Code to run when component starts\r\n\t\tconsole.log(\"Result View Mount\")\r\n\t\tthis.search();\r\n\t\tthis.updateSearchInterval = setInterval(function(){\r\n\t\t\tif(this.query){\r\n\t\t\t\tthis.search();\r\n\t\t\t}\r\n\t\t}, 2500);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\t// Componoent dies -> deconstructor\r\n\t\tclearInterval(this.updateSearchInterval);\r\n\t}\r\n\tasync search() {\r\n\t\tconsole.log(\"Running Search Request\");\r\n\t\tlet pageSize = settings.get(\"pageSize\");\r\n\t\tlet resp = await (await fetch(\r\n\t\t\tmusicServer +\r\n\t\t\t\t\"/api/fetch_\" +\r\n\t\t\t\tthis.state.type +\r\n\t\t\t\t\"?\" +\r\n\t\t\t\tserialize({\r\n\t\t\t\t\tlimit: pageSize,\r\n\t\t\t\t\toffset: pageSize * this.state.pageIndex,\r\n\t\t\t\t\tname: this.state.searchBoxValue + \"%\",\r\n\t\t\t\t})\r\n\t\t)).json();\r\n\t\tif (resp.status == \"ok\") {\r\n\t\t\tlet data = resp.data;\r\n\t\t\tthis.setState(function (state, props) {\r\n\t\t\t\treturn {pageData: data};\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tlet comps = this.state.pageData.map(function(item){\r\n\t\t\treturn <>\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col s4\">{item.name}</div>\r\n\t\t\t\t\t<div class=\"col s4\">{item.createdAt}</div>\r\n\t\t\t\t\t<div class=\"col s4\">{JSON.parse(item.contents).length}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t})\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col s4\">{this.state.col1}</div>\r\n\t\t\t\t\t<div class=\"col s4\">{this.state.col2}</div>\r\n\t\t\t\t\t<div class=\"col s4\">{this.state.col3}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{comps}\r\n\t\t\t\tResult View\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\nclass PlaylistView extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { searchBoxValue: \"\" };\r\n\t\t//this.fetchSearch = this.fetchSearch.bind(this);\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\t// Code to run when component is destoryed -> constructor\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\t// Componoent dies -> deconstructor\r\n\t}\r\n\tfetchSearch(event) {\r\n\t\tconsole.log(event);\r\n\t\tconsole.log(\"Updating Search\");\r\n\t\tlet searchValue = event.target.value;\r\n\t\tif (event.target.value) {\r\n\t\t\tthis.setState(function (state, props) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsearchBoxValue: searchValue,\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tid=\"searchbox-playlists\"\r\n\t\t\t\t\tclass=\"searchbox\"\r\n\t\t\t\t\tonChange={this.fetchSearch.bind(this)}\r\n\t\t\t\t\tplaceholder={i18n.__(\"Type to search\")}\r\n\t\t\t\t/>\r\n\t\t\t\t<ResultView\r\n\t\t\t\t\ttype=\"playlists\"\r\n\t\t\t\t\tquery={this.state.searchBoxValue}\r\n\t\t\t\t></ResultView>\r\n\t\t\t\t<div></div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\nlet views = {};\r\nviews.playlists = <PlaylistView />;\r\n\r\n// Bootstrap code\r\nif (uiManager) {\r\n\tconsole.log(\"Binding to uiManager\");\r\n\tuiManager.on(\"launchview\", function (data) {\r\n\t\tconsole.log(data);\r\n\t\tconsole.log(\"Rendering \" + data.id);\r\n\t\tconsole.log(views[data.id]);\r\n\t\tReactDOM.render(views[data.id], document.getElementById(\"contentview\"));\r\n\t});\r\n} else {\r\n\tconsole.log(\"Error ui manager not found\");\r\n}\r\n"]}